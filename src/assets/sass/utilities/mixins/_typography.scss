// This mixin will extract header font size & line-height information from $fontSize map
// $fontSize -> header -> {key}
// { $enableLineHeight } boolean to toggle lineheight
// Usage
// h1{ @include getHeaderFontSize("h1") }
// Note: make sure key exists in the map
// Map found at /variables/fonts.scss

// @mixin getHeaderFontSize($key: null, $enableLineHeight: true) {
//   font-size: unitConversion(get("header.#{$key}.font-size", $fontSize));
//   @if ($enableLineHeight) {
//     line-height: get("header.#{$key}.line-height", $fontSize);
//   }
//   letter-spacing: get("header.#{$key}.spacing", $fontSize);
//   font-weight: get("header.#{$key}.font-weight", $fontSize);
// }

// This mixin will extract body font size & line-height information from $fontSize map
// $fontSize -> font -> {key}
// { $enableLineHeight } boolean to toggle lineheight
// Usage
// .card-title { @include getFontSize("body1") }
// Note: make sure key exists in the map
// Map found at /variables/fonts.scss

@mixin getFontSize($key: null) {
  font-size: unitConversion(get("#{$key}.font-size", $fontSize));
  line-height: get("#{$key}.line-height", $fontSize);
  font-weight: get("#{$key}.font-weight", $fontSize);
  @if(deep-map-check(get("#{$key}", $fontSize), "text-decoration")){
    text-decoration: get("#{$key}.text-decoration", $fontSize);
  }
}


@mixin font-size($fs-map, $fs-breakpoints: $grid-breakpoints) {
  @each $fs-breakpoint, $fs-font-size in $h1-font-sizes {
    @if $fs-breakpoint == null {
      font-size: $fs-font-size;
    }
    @else {
      // If $fs-font-size is a key that exists in
      // $fs-breakpoints, use the value
      @if map-has-key($fs-breakpoints, $fs-breakpoint) {
        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
      }
      @media screen and (min-width: $fs-breakpoint) {
        font-size: $fs-font-size;
      }
    }
  }
}


h1 {
  @include font-size($h1-font-sizes);

}

