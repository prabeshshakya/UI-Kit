/* Button Defaults */
%btn-default{
    padding: 0;
    border: none;
    font: inherit;
    color: inherit;
    background-color: transparent;
    border: 1px solid transparent;
    cursor: pointer;
    outline: none;
    display: inline-block;
    &:active{
        transform: scale(0.98);
    }
    &:disabled{
        opacity: 0.6;
        cursor: not-allowed;
        background-color: getColor("black.black20");
        &:hover{
            background-color: getColor("black.black20");
        }
    }
}

/* Mixin to define button size
//
// Parameters:
// --> $height: Any CSS Size
// --> $padding: Any CSS Size
// --> $font-size: Any CSS Size
//
*/
@mixin btn-size(
    $height: get("regular.height", $btn-size),
    $padding: get("regular.spacing", $btn-size),
    $font-size: get("regular.font-size", $btn-size),
) {
    padding: $padding;
    font-size: $font-size;
    @if($height != 'auto'){
        line-height: $height - 2px;
    }@else{
        line-height: 1;
    }
}

/* Mixin to define button color
//
// Parameters:
// --> $bgColorKey: Any CSS Color
// --> $textColorKey: Any CSS Color
// --> $outlined: Boolean
//
*/
@mixin btn-color(
    $bgColorKey: null, 
    $textColorKey: null, 
    $outlined: null
) {
    @if ($outlined == null or $outlined == false){
        background-color: $bgColorKey;
        color: $textColorKey;
    } @else {
        border-color: $bgColorKey;
        color: $bgColorKey;
    }
}

/* Mixin to define button hover color
//
// Parameters:
// --> $bgColorKey: Any CSS Color
// --> $textColorKey: Any CSS Color
//
*/
@mixin btn-hover(
    $bgColorKey: null, 
    $textColorKey: null
){
    &:hover{
        background-color: $bgColorKey;
        color: $textColorKey;
    }
}

/* Mixin to define button hover color
//
// Parameters:
// --> $border-radius: Border radius as in CSS
//
*/
@mixin btn-roundness($border-radius:null){
    border-radius: $border-radius;
}

/* Parent Mixin that generates button related classes
//
// Parent Class: 
// --> btn
//
// Modifiers:
// --> variant ("primary", "secondary") or as per defined in $btn-variant Map
//       ## Usage:
//       btn--primary, btn--secondary
//       ## For outlined buttons:
//       btn--outlined--primary, btn--outlined--secondary
//
// --> size ("small", "regular", "large") or as per defined in $btn-size Map
//       ## Usage:
//       btn--small, btn-regular, btn-large
//
// --> rounded : defines if button has rounded button
//       ## Usage:
//       btn--rounded
*/
@mixin btn-maker($class: 'btn') {
    .#{$class}{
        @include transition($duration: 0.2s);
        //button defaults
        @extend %btn-default;
        //default button height and padding (ie. Regular size)
        @include btn-size;
       
        //generates modifier for button size
        @each $name, $map in $btn-size{
            @include m($name){
                @include btn-size(
                    $height: get("height", $map),
                    $padding: get("spacing", $map),
                    $font-size: get("font-size", $map)
                )
            }
        }
        
        @include m(icon){
            @include m(right){

            }
        }

        //generates modifier for button variants
        @each $type, $map in $btn-variant{
            @include m(shadowed){
                @include m($type){
                    box-shadow: 0px 8px 15px rgba(get("bg-color", $map), 0.3);
                }
            }
            @include m($type){
                @include btn-color($bgColorKey: get("bg-color", $map), $textColorKey: $btn-base-text-color);
                @include btn-hover($bgColorKey: get("hover-color", $map), $textColorKey: $btn-base-text-color);
            }
            @include m(outlined){
                @include m($type){
                    @include btn-color($bgColorKey: get("bg-color", $map), $textColorKey: $btn-base-text-color, $outlined: true);
                    @include btn-hover($bgColorKey: get("hover-color", $map), $textColorKey: $btn-base-text-color);
                }
            }
            @include m(text){
                @include m($type){
                    @include btn-size($height: 'auto', $padding: 0);
                    @include btn-color($bgColorKey: transparent, $textColorKey: get("bg-color", $map));
                    @include btn-hover($bgColorKey: transparent, $textColorKey: get("hover-color", $map));
                }
            }
        }

        //generates modifier for roundness of button
        @include m(rounded){
            @include btn-roundness($btn-roundness);
        }
        
        @include m(block){
            width: 100%;
        }
    }
}
